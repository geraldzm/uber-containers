Crear Volumen :
docker volume create vol_italia1
docker volume create vol_china2

Crear Servidor Principal del pais que le toca :
docker run -d -p 27001:27017 -v vol_italia1 --name italy1 mongo mongod --port 27017 --bind_ip_all --shardsvr --replSet "repitaly" --dbpath /data/db

Secundario, del pais que le toca replicar
docker run -d -p 27201:27017 -v vol_china2:/data/db --name china2 mongo mongod --port 27017 --bind_ip_all --shardsvr --replSet "repchina" --dbpath /data/db

Iniciar ReplicaSet :

docker exec -it italy1 mongo

rs.initiate(
  {
    _id: "repitaly",
    members: [
      { _id : 0, host : "25.4.55.235:27001" },
      { _id : 1, host : "25.1.213.132:27001" }
    ]
  }
);

cfg = rs.conf();
cfg.members[0].priority = 2;
cfg.members[1].priority = 0.5;
rs.reconfig(cfg);

Crear Árbitro :
docker run -d -p 37001:27017 --name arbitaly mongo mongod --port 27017 --replSet "repitaly"

Añadir árbitro dentro del servidor principal :

docker exec -it italy1 mongo

rs.addArb("25.4.55.235:37001");

----------------------
Pruebitas de conexión : 
docker exec -it italy1 mongo

use pruebaMexico

db.container.insert({"country":"", "cantidad":1 });

db.tacos.save({"nombre":"Pastor", "cantidad":5});
db.tacos.save({"nombre":"Birria", "cantidad":2});
db.tacos.save({"nombre":"Chorizo", "cantidad":3});

db.tacos.find();

---------------------------Create Config-------------------------------------
Crear Volumen :
docker volume create vol_cfg

Crear container de configuracion :
docker run -d -p 47001:27017 -v vol_cfg:/data/configdb --name cfg2 mongo mongod --port 27017 --bind_ip_all --configsvr --replSet "repcfg" --dbpath /data/configdb

docker exec -it cfg2 mongo

configsvr: true

rs.initiate(
  {
    _id: "repcfg",
    members: [
      { _id : 0, host : "25.4.55.235:47001" },
      { _id : 1, host : "25.1.213.132:47001" }
    ]
  }
);

cfg = rs.conf();
cfg.members[0].priority = 3;
cfg.members[1].priority = 1;
rs.reconfig(cfg);

--------------------------Create Routers-------------------------------------

Router:
docker run -d -p 47003:27017 --name router1 mongo mongos --port 27017 --configdb repcfg/25.1.213.132:47001,25.5.185.77:47001 --bind_ip_all

docker exec -it router1 mongo

----------------------------------------------------------------
sh.addShard( "repitaly/25.4.55.235:27001");
 
sh.addShard( "repspain/25.1.213.132:27101");

sh.addShard( "repchina/25.5.185.77:27201");


sh.status()

sh.addShardTag("repitaly", "italy");
sh.addShardTag("repspain", "spain");
sh.addShardTag("repchina", "china");

//Data base Order

  --------------------------Add tags---containers-----------------------------------
sh.addTagRange( "order.containers",
              { currentCountry: "italy"},
              { currentCountry: "italy99999"},
              "italy"
            );

sh.addTagRange( "order.containers",
                { currentCountry: "spain"},
                { currentCountry: "spain9999"},
                "spain"
              );

sh.addTagRange( "order.containers",
                { currentCountry: "china"},
                { currentCountry: "china9999"},
                "china"
              );

//Le indico la base de datos y lo mando a correr
sh.enableSharding("order");

//Indico la collection
sh.shardCollection("order.containers", { currentCountry : 1 } )

//Data base Actul
  --------------------------Add tags---orders-----------------------------------
sh.addTagRange( "actul.orders",
                { currentCountry: "italy"},
                { currentCountry: "italy99999"},
                "italy"
              );

sh.addTagRange( "actul.orders",
                { currentCountry: "spain"},
                { currentCountry: "spain9999"},
                "spain"
              );

sh.addTagRange( "actul.orders",
                { currentCountry: "china"},
                { currentCountry: "china9999"},
                "china"
              );

//Le indico la base de datos y lo mando a correr
sh.enableSharding("actul");

//Indico la collection
sh.shardCollection("actul.orders", { currentCountry : 1 } )

--------------------------Add tags---orderHistory-----------------------------------
sh.addTagRange( "actul.orderhistories",
                { currentCountry: "italy"},
                { currentCountry: "italy99999"},
                "italy"
              );

sh.addTagRange( "actul.orderhistories",
                { currentCountry: "spain"},
                { currentCountry: "spain9999"},
                "spain"
              );

sh.addTagRange( "actul.orderhistories",
                { currentCountry: "china"},
                { currentCountry: "china9999"},
                "china"
              );

//Le indico la base de datos y lo mando a correr
sh.enableSharding("actul");

//Indico la collection
sh.shardCollection("actul.orderhistories", { currentCountry : 1 } )


use order

db.containers.insert({"country":"china", "cantidad":1 });
db.container.insert({"country":"spain", "cantidad":2 });
db.container.insert({"country":"italy", "cantidad":3 });

db.container.insert({"country":"cr", "cantidad":999 });

db.containers.deleteOne( { "_id" : ObjectId("626f94ba190ecbe598b8165e") } );


use order
db.dropDatabase()
use actul
db.dropDatabase()


cfg = rs.conf()
cfg.settings.getLastErrorDefaults = { w: 1, wtimeout: 5000 }
rs.reconfig(cfg)

db.adminCommand({
  "setDefaultRWConcern" : 1,
  "defaultWriteConcern" : {
    "w" : 1
  }
})

db.adminCommand({
  "getDefaultRWConcern": 1
})

db.products.insertOne(
   { item: "envelopes", qty : 100, type: "Clasp" },
   { writeConcern: { w: 1 , wtimeout: 5000 } }
)

 cfg = rs.conf()
    cfg.settings = {}
    cfg.settings.setDefaultRWConcern = { w: 1, wtimeout: 5000 }
    rs.reconfig(cfg)